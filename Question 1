// { Driver Code Starts
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    public static void main (String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	        
	    int t=Integer.parseInt(br.readLine().trim());
	    while(t > 0)
	    {
	        int n= Integer.parseInt(br.readLine().trim());
	        String x = br.readLine().trim();
	        String string_list[] = x.split(" ",n);
	        
	        Solution ob = new  Solution();
	        
	        List <List<String>> ans = ob.Anagrams(string_list);
	        
	        Collections.sort(ans, new Comparator<List<String>>(){
            public int compare(List<String> l1, List<String> l2) {
                    String s1 =  l1.get(0);
                    String s2 = l2.get(0);
                    
                    return s1.compareTo(s2);
                }
            });
	        
	        for(int i=0;i<ans.size();i++)
	        {
	            for(int j=0;j<ans.get(i).size();j++)
	            {
	                System.out.print(ans.get(i).get(j) + " ");
	            }
	            System.out.println();
	        }
	       
	       
            t--;
	    }
	}
    
}
// } Driver Code Ends


//User function Template for Java

class Solution 
{
    public List<List<String>> Anagrams(String[] wrd) 
    {
        LinkedHashMap<String,ArrayList<String>> map=new LinkedHashMap<String,ArrayList<String>>();
        for(int i=0;i<wrd.length;i++)
        {
            String w=wrd[i],grp=sort(w);
            map.putIfAbsent(grp,new ArrayList<String>());
            map.get(grp).add(w);
        }
        List<List<String>> ans=new ArrayList<List<String>>();
        Iterator<String> it=map.keySet().iterator();
        while(it.hasNext())
        {
            ans.add(map.get(it.next()));
        }
        return ans;
    }
    String sort(String s)
    {
        char c[]=new char[26];
        String ans="";
        for(int i=0;i<s.length();i++)
            c[s.charAt(i)-'a']++;
        for(int i=0;i<26;i++)
        {
            while(c[i]-->0)
            ans=ans + (char)('a'+i);
        }
        return ans;
    }
}
